{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOafcc6CbB/avt8V0hIT4vG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ashangel54/Statistics/blob/main/Laboratory3%20ADM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Task 1\n"
      ],
      "metadata": {
        "id": "ELcDDfAa1vY8"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "J8zCSyX8050i",
        "outputId": "04cb1428-1b14-46c6-8c62-b66d1dd8a011"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Create a function which for a given list of integers verifies whether it contains a sequence of k consecutive numbers.'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ],
      "source": [
        "'''Create a function which for a given list of integers verifies whether it contains a sequence of k consecutive numbers.'''"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Task 2"
      ],
      "metadata": {
        "id": "tYNnfU7315Sa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "parties1 = ['PiS', 'PO']\n",
        "parties2 = ['TrzeciaDroga', 'Lewica', 'Konfederacja']\n",
        "listTotal = []\n",
        "\n",
        "def concatenate(listTotal):\n",
        "    for i in range(len(parties1)):\n",
        "        for j in range(len(parties2)):\n",
        "            listTotal.append(parties1[i]+parties2[j])\n",
        "    return listTotal\n",
        "\n",
        "concatenate(listTotal)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZUY9gnI01Pmf",
        "outputId": "916b7673-afa5-4ec2-8dc4-abacda573d01"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['PiSTrzeciaDroga',\n",
              " 'PiSLewica',\n",
              " 'PiSKonfederacja',\n",
              " 'POTrzeciaDroga',\n",
              " 'POLewica',\n",
              " 'POKonfederacja']"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Task 3\n"
      ],
      "metadata": {
        "id": "g5nZTIBk1bDH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def remove_polish_diacritics(list_of_strings):\n",
        "    new_list = []\n",
        "    polish_diacritics = ['ą', 'ę' 'ź', 'ć', 'ł', 'ż', 'ś', 'ó']\n",
        "    for i in list_of_strings:\n",
        "        for char in i:\n",
        "            if char in polish_diacritics:\n",
        "                list_of_strings.remove(i)\n",
        "            else:\n",
        "                new_list.append(i)\n",
        "    return new_list\n",
        "\n",
        "names = ['Kaczyński', 'Tusk', 'Hołownia', 'Kosiniak-Kamysz', 'Czarzasty', 'Mentzen']\n",
        "print(remove_polish_diacritics(names))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eiLlZUZ51PMc",
        "outputId": "f86c85eb-08a7-407e-b360-fe3533228ce3"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Kaczyński', 'Kaczyński', 'Kaczyński', 'Kaczyński', 'Kaczyński', 'Kaczyński', 'Kaczyński', 'Kaczyński', 'Kaczyński', 'Tusk', 'Tusk', 'Tusk', 'Tusk', 'Hołownia', 'Hołownia', 'Hołownia', 'Hołownia', 'Hołownia', 'Hołownia', 'Hołownia', 'Czarzasty', 'Czarzasty', 'Czarzasty', 'Czarzasty', 'Czarzasty', 'Czarzasty', 'Czarzasty', 'Czarzasty', 'Czarzasty', 'Mentzen', 'Mentzen', 'Mentzen', 'Mentzen', 'Mentzen', 'Mentzen', 'Mentzen']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def remove_polish_diacritics(list_of_strings):\n",
        "    new_list = []\n",
        "    polish_diacritics = ['ą', 'ę' 'ź', 'ć', 'ł', 'ż', 'ś', 'ó', 'ń']\n",
        "    for i in list_of_strings:\n",
        "        remove = False\n",
        "        for char in i:\n",
        "            if char in polish_diacritics:\n",
        "                remove = True\n",
        "        if not remove:\n",
        "            new_list.append(i)\n",
        "    return new_list\n",
        "\n",
        "names = ['Kaczyński', 'Tusk', 'Hołownia', 'Kosiniak-Kamysz', 'Czarzasty', 'Mentzen']\n",
        "remove_polish_diacritics(names)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TOVZTGlo4VtN",
        "outputId": "1d223e12-1aa9-4cde-e3ff-2f861465c91e"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Tusk', 'Kosiniak-Kamysz', 'Czarzasty', 'Mentzen']"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  Task 4"
      ],
      "metadata": {
        "id": "6sIv6xnw48Ps"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''For a given list of strings consisting of only small and capital letters of the latin alphabet create a function which for each\n",
        "string generates its version such that each capital letter in this string is preceded by a whitespace.'''\n",
        "def add_whitespaces(without_whitespaces):\n",
        "    with_whitespaces = [concatenate]\n",
        "    for sentence in without_whitespaces:\n",
        "         s = sentence[0]\n",
        "         for j in range(1, len(sentence)):\n",
        "             if sentence[j].isupper():\n",
        "                 s += ' ' + sentence[j]\n",
        "             else:\n",
        "                 s += sentence[j]\n",
        "         with_whitespaces.append(s)\n",
        "    return with_whitespaces\n",
        "without_whitespaces = ['jnidsiNJbBBTNjnnI']\n",
        "add_whitespaces(without_whitespaces)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZqDri32h5FIr",
        "outputId": "5bab5c69-49e9-4d7e-9f31-81364b9c502f"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<function __main__.concatenate(listTotal)>, 'jnidsi N Jb B B T Njnn I']"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    }
  ]
}